<?xml version="1.0"?>
<project name="xPDOCore" description="" default="complete-wc" basedir=".">
    <!-- Override properties in the build.properties file -->
    <property file="build.properties" />

    <!-- Set some common project properties -->
    <property name="project.name" value="xpdo" />
    <property name="project.basedir" value=".." />
    <property name="project.core.dir" value="${project.basedir}/xpdo" />
    <property name="project.tutorials.dir" value="${project.basedir}/tutorials" />
    <property name="project.test.dir" value="${project.basedir}/test" />
    <property name="project.model.dir" value="${project.basedir}/model" />
    <property name="project.build.dir" value="${project.basedir}/build" />

    <!-- Set the project version -->
    <property name="xpdo.core.version" value="2.0.0" />
    <property name="xpdo.core.release" value="pl" />

    <!-- Set some common build properties -->
    <property name="build.dir" value="." />
    <property name="build.src.tree" value="master" />
    <property name="build.src.remote"
              value="git://github.com/modxcms/xpdo.git"
    />
    <property name="build.image.basedir" value="./image" />
    <property name="build.image.name" value="${project.name}-${xpdo.core.version}-${xpdo.core.release}" />
    <property name="build.image.dir" value="${build.image.basedir}/${build.image.name}" />
    <property name="build.distrib.dir" value="./distrib" />
    <property name="build.distrib.name" value="${project.name}-${xpdo.core.version}-${xpdo.core.release}" />
    <property name="build.apidocs.dir" value="${build.image.dir}/docs" />

    <!-- ================================= 
          target: complete              
         ================================= -->
    <target name="complete" description="--> Complete Build">
        <phingcall target="git-export-build-image" />
        <phingcall target="generate-phpdocs" />
        <phingcall target="prepare-build-image" />
        <phingcall target="build-sdk" />
        <phingcall target="build-minimal" />
    </target>

    <target name="complete-wc" description="--> Complete Build from Working Copy">
        <phingcall target="git-export-build-image-wc" />
        <phingcall target="generate-phpdocs" />
        <phingcall target="prepare-build-image" />
        <phingcall target="build-sdk" />
        <phingcall target="build-minimal" />
    </target>

    <!-- Various cleanup targets -->
    <target name="cleanup-build-image" description="empty the build image directory">
        <delete dir="${build.image.dir}" />
        <mkdir dir="${build.image.dir}" />
    </target>
    <target name="cleanup-build-distrib" description="empty the build distrib directory">
        <delete dir="${build.distrib.dir}" />
    </target>
    <target name="cleanup-build-apidocs" description="empty the build apidocs directory">
        <delete dir="${build.apidocs.dir}" />
    </target>

    <!-- Export the svn build image from the repository -->
    <target name="git-export-build-image"
            depends="cleanup-build-image"
            description="export a revision of the xPDO core from a Git remote repository"
    >
        <exec dir="${project.basedir}" command="${git.command} archive -o .build/image/${build.image.name}.zip --remote=${build.src.remote} --format=zip --prefix=${build.image.name}/ ${build.src.tree}" escape="false" />
        <unzip file="${build.image.basedir}/${build.distrib.name}.zip" todir="${build.image.basedir}" />
    </target>

    <!-- Export the Git build image from a local repository -->
    <target name="git-export-build-image-wc"
            depends="cleanup-build-image"
            description="export a revision of the xPDO core from a local Git repository"
    >
        <exec dir="${project.basedir}" command="${git.command} archive -o ./build/image/${build.image.name}.zip --format=zip --prefix=${build.image.name}/ ${build.src.tree}" escape="false" />
        <unzip file="${build.image.basedir}/${build.distrib.name}.zip" todir="${build.image.basedir}" />
    </target>

    <!-- Run the phpdoc generation script -->
    <target name="generate-phpdocs"
            depends="cleanup-build-apidocs"
            description="generate the phpdoc documentation"
    >
        <phpdoc title="xPDO ${xpdo.core.version}-${xpdo.core.release} Documentation"
                destdir="${build.apidocs.dir}"
                sourcecode="false"
                output="HTML:frames:DOM/earthli">
            <fileset dir="${build.image.dir}/xpdo" />
        </phpdoc>
    </target>

    <!-- Prepare the build image for making a distrib -->
    <target name="prepare-build-image" description="prepare the build image for packaging">
        <mkdir dir="${build.distrib.dir}" />
    </target>

    <!-- Build a xPDO SDK distrib with all files -->
    <target name="build-sdk" description="create the sdk distribution package">
        <zip destfile="${build.distrib.dir}/${build.distrib.name}-sdk.zip" basedir="${build.image.dir}" prefix="${build.distrib.name}/" />
    </target>

    <!-- Build a minimal xPDO distrib with just the core library files -->
    <target name="build-minimal" description="create the minimal distribution package">
        <zip destfile="${build.distrib.dir}/${build.distrib.name}.zip" basedir="${build.image.dir}/xpdo" prefix="${build.distrib.name}/" />
    </target>

    <!-- Publish a distrib to a server -->
    <target name="publish-build" description="publish the build to a server for download">
        
    </target>
</project>